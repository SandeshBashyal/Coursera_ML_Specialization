 SOURCE FROM LEARNXINYMINUTES.COM

# -> comment line
"""   
	--------
       """ -> multiple line comments
	   
+ , - , * , / 
5 // 3        	=> 1
-5 // 3       	=> -2
5.0 // 3.0    	=> 1.0 
-5.0 // 3.0   	=> -2.0
10.0 / 3      	=> 3.3333333333333335		->Result of division is always float
7 % 3   	  	=> 1		->Modulo
-7 % 3  	  	=> 2		
2**3 		  	=> 8 		->Exponential
1 + 3 * 2     	=> 7		->Parenthesis
(1 + 3) * 2   	=> 8

not True      	=> False	->Negate with not
not False  	  	=> True
True and False	=> False	->Case Sensitive
False or True   => True
True + True 	=> 2		->True = 1, False = 0
True * 8    	=> 8
False - 5   	=> -5
0 == False  	=> True		->Comparison Operators
1 == True   	=> True
2 == True  		=> False
-5 != False 	=> True

bool(0)     	=> False	->None, 0, and empty strings/lists/dicts/tuples/sets all evaluate to False
bool("")    	=> False	->All other values are True
bool([])    	=> False
bool({})    	=> False
bool(())    	=> False
bool(set()) 	=> False

bool(4)     	=> True
bool(-6)    	=> True
bool(0)     	=> False
bool(2)     	=> True
0 and 2     	=> 0
bool(-5)    	=> True
bool(2)     	=> True
-5 or 0     	=> -5

==, !=, <, >, <=, >=		->Equality, Inequality, Comparisons
1<2<3 			=>True		->Chaning 
2<3<2			=>False

is Vs ==
	a = [1, 2, 3, 4] 			->List
	b = a
	b is a 			=>True 		-> a and b refers to same object
	b == a 			=>True		-> Equal

	b = [1, 2, 3, 4] 			->List
	b is a 			=>False
	b == a 			=>True
	
"________" ; '_______'			->Strings
Strings can be concatenated with or without the use of '+'.
Strings can be considered as a array. 
"Hello world!"[0]   => 'H' 

len					=>Length of String
name = "Reiko"
f"She said her name is {name}."
f"{name} is {len(name)} characters long." 

<-------------------------------------------------------->
2. Variables and Collections
print("_________")
print("Hello, World", end="!")  => Hello, World!
a = input("_______") 			->Returns the data as a string 
  
"yay!" if 0 > 1 else "nay!"  	=> "nay!"


li = []
li.append(1)    => li is now [1]
li.append(2)    => li is now [1, 2]
li.append(4)    => li is now [1, 2, 4]
li.append(3)    => li is now [1, 2, 4, 3]
li.pop()        => 3 and li is now [1, 2, 4]
li.append(3)    => li is now [1, 2, 4, 3] again.
li[0]    => 1
li[-1]   => 3
li[4]    Raises an IndexError
<--------li[start:end:step]----------->
li[1:3]   	 	Return list from index 1 to 3 => [2, 4]
li[2:]    	 	Return list starting from index 2 => [4, 3]
li[:3]    	 	Return list from beginning until index 3  => [1, 2, 4]
li[::2]   	 	Return list selecting every second entry => [1, 4]
li[::-1]  	 	Return list in reverse order => [3, 4, 2, 1]
li2 = li[:] 	=> li2 = [1, 2, 4, 3] but (li2 is li) will result in false.
del li[2]  		=> li is now [1, 2, 3]
li.remove(2)  	=> li is now [1, 3]
li.remove(2)  	=> Raises a ValueError as 2 is not in the list
li.insert(1, 2) => li is now [1, 2, 3]
li.index(2)  	=> 1
li.index(4)  	=> Raises a ValueError as 4 is not in the list

other_li = [4, 5, 6]
li.extend(other_li)  	=> Now li is [1, 2, 3, 4, 5, 6] z 6
li + other_li  			=> [1, 2, 3, 4, 5, 6]
1 in li  				=> True
len(li)  				=> 6

Tuples are immutable.
tup = (1, 2, 3)
tup[0]      		=> 1
tup[0] = 3  		=>Raises a TypeError
type((1))    => <class 'int'>
type((1,))   => <class 'tuple'>
type(())     => <class 'tuple'>
len(tup)          => 3
tup + (4, 5, 6)   => (1, 2, 3, 4, 5, 6)
tup[:2]           => (1, 2)
2 in tup          => True
a, b, c = (1, 2, 3)  	 # a is now 1, b is now 2 and c is now 3
a, *b, c = (1, 2, 3, 4)  # a is now 1, b is now [2, 3] and c is now 4
d, e, f = 4, 5, 6 		 # d = 4, e = 5 and f = 6
e, d = d, e  			 # d is now 5 and e is now 4

Dictionaries store mappings from keys to values
empty_dict = {}
Here is a prefilled dictionary
filled_dict = {"one": 1, "two": 2, "three": 3}
invalid_dict = {[1,2,3]: "123"}   => Raises a TypeError: unhashable type: 'list'
valid_dict = {(1,2,3):[1,2,3]}    => Values can be of any type, however.
